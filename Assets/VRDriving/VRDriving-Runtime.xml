<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VRDriving-Runtime</name>
    </assembly>
    <members>
        <member name="T:VRDriving.ControllerInfo">
            <summary>
            A class that holds information about a controller.
            </summary>
            Author: Mathew Aloisio
        </member>
        <member name="T:VRDriving.ControllerSide">
            <summary>
            An enumerate representing a controller by it's handedness. (ControllerSide.Left for left hand controllers, ControllerSide.Right for right hand controllers.)
            </summary>
            Author: Mathew Aloisio
        </member>
        <member name="T:VRDriving.Events.ControllerUnityEvent">
            <summary>Arg0: ControllerInfo - The controller information about the controller associated with the event.</summary>
        </member>
        <member name="T:VRDriving.Events.SteeringUnityEvent">
            <summary>
            An event that involves a VehicleGrabbableSteeringBase component.
            
            Arg0: VehicleGrabbableSteeringBase - The component involved in the event.
            </summary>
        </member>
        <member name="T:VRDriving.Events.SteeringControllerUnityEvent">
            <summary>
            An event that involves a VehicleGrabbableSteeringBase component and a controller.
            
            Arg0: VehicleGrabbableSteeringBase - The component involved in the event.
            Arg1: ControllerInfo - The info about the controller involved in the event.
            </summary>
        </member>
        <member name="T:VRDriving.Grabbing.IGrabbable">
            <summary>The abstract base class for all grabbable types.</summary>
            Author: Mathew Aloisio
        </member>
        <member name="M:VRDriving.Grabbing.IGrabbable.OnGrabbed(UnityEngine.Transform,VRDriving.ControllerSide)">
            <summary>
            A callback intended to be invoked when a controller grabs the wheel.
            </summary>
            <param name="pControllerTransform">The Transform of the controller that grabbed the wheel.</param>
            <param name="pControllerSide">The ControllerSide for the controller that grabbed the wheel.</param>
        </member>
        <member name="M:VRDriving.Grabbing.IGrabbable.OnReleased(UnityEngine.Transform,VRDriving.ControllerSide)">
            <summary>
            A callback intended to be invoked when a controller releases the wheel.
            </summary>
            <param name="pControllerTransform">The Transform of the controller that grabbed the wheel.</param>
            <param name="pControllerSide">The ControllerSide for the controller that grabbed the wheel.</param>
        </member>
        <member name="T:VRDriving.InterfaceHelper">
            <summary>A static class that allows components with interfaces to be retrieved.</summary>
            Author: Mathew Aloisio
        </member>
        <member name="M:VRDriving.InterfaceHelper.GetInterface``1(UnityEngine.GameObject)">
            <summary>Returns the first interface of the specified type found in pInObject, or null.</summary>
            <typeparam name="T"></typeparam>
            <param name="pInObject"></param>
            <returns>the first interface of the specified type found in pInObject, or null.</returns>
        </member>
        <member name="M:VRDriving.InterfaceHelper.GetInterfaces``1(UnityEngine.GameObject)">
            <summary>Returns an enumerable list of the specified interface types found in pInObject, or an empty enumerable.</summary>
            <typeparam name="T"></typeparam>
            <param name="pInObject"></param>
            <returns>an enumerable list of the specified interface types found in pInObject, or an empty enumerable.</returns>
        </member>
        <member name="M:VRDriving.Math.FloatMath.ClampAngle(System.Single,System.Single,System.Single)">
            <summary>
            Returns a clamped angle between the specified minimum and maximum.
            </summary>
            <param name="pAngle"></param>
            <param name="pMinimum"></param>
            <param name="pMaximum"></param>
            <returns>a clamped angle between the specified minimum and maximum.</returns>
        </member>
        <member name="M:VRDriving.Math.FloatMath.WrapAngle(System.Single)">
            <summary>
            Wraps the given signed angle between 0 and 360 degrees.
            </summary>
            <param name="pAngle"></param>
            <returns></returns>
        </member>
        <member name="M:VRDriving.Math.FloatMath.FloatFrom180To360(System.Single)">
            <summary>Given a float from -180 to 180 returns the same float from 0 to 360.</summary>
            <param name="pIn"></param>
            <returns>the same float from 0 to 360.</returns>
        </member>
        <member name="M:VRDriving.Math.FloatMath.GetSignedDistanceInDirection(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Returns the signed distance between two vectors pA and pB in a given direction, pDirection.
            </summary>
            <param name="pDirection">The world space direction.</param>
            <param name="pA"></param>
            <param name="pB"></param>
            <returns>the signed distance between two vectors pA and pB in a given direction, pDirection.</returns>
        </member>
        <member name="M:VRDriving.Math.FloatMath.GetUnscaledRadius(UnityEngine.SphereCollider)">
            <summary>Given a reference to a SphereCollider returns it's unscaled radius.</summary>
            <param name="pCollider"></param>
            <returns>the unscaled radius of the referenced SphereCollider.</returns>
        </member>
        <member name="M:VRDriving.Math.VectorMath.VectorFrom180To360(UnityEngine.Vector3)">
            <summary>Given a Vector of euler angles from -180 to 180 returns the same Vector of euler angles from 0 to 360.</summary>
            <param name="pIn"></param>
            <returns>the same Vector of euler angles from 0 to 360.</returns>
        </member>
        <member name="M:VRDriving.Math.VectorMath.RotatePointAroundPivot(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
            <summary>
            Gets the direction of point relative to a pivot and then returns the calculated rotated point.
            </summary>
            <param name="pPoint"></param>
            <param name="pPivot"></param>
            <param name="pAngles"></param>
            <returns>the point rotated around the pivot.</returns>
        </member>
        <member name="T:VRDriving.Steering.VehicleHandRelativeHandlebarSteering">
            <summary>
            A component that should be attached to the vehicle's steering grabbable that sets a handlebar'd vehicle's steering angle based on hand/controller positions.
            One-handed steering uses the direction of the line perpendicular to the line between the driving hand and the handlebar's rotation pivot.
            Two-handed steering uses the direction of the line perpendicular to the line between each hands on the handlebar's rotation plane.
            </summary>
            Author: Mathew Aloisio
        </member>
        <member name="T:VRDriving.Steering.VehicleHandRelativeHandlebarSteering.HandlebarController">
            <summary>Stores reference to a controller that is grabbing the handlebars currently and some information about where it is grabbing the handlebars.</summary>
        </member>
        <member name="P:VRDriving.Steering.VehicleHandRelativeHandlebarSteering.HandlebarAngle">
            <summary>A running total for the handlebar's angle.</summary>
        </member>
        <member name="F:VRDriving.Steering.VehicleHandRelativeHandlebarSteering.m_DefaultHandlebarLocalEulerAngles">
            <summary>The default local euler angles of the handlebar transform.</summary>
        </member>
        <member name="F:VRDriving.Steering.VehicleHandRelativeHandlebarSteering.m_DefaultHandlebarFixedForwardDirection">
            <summary>The default fixed forward direction of the handlebar transform.</summary>
        </member>
        <member name="F:VRDriving.Steering.VehicleHandRelativeHandlebarSteering.m_SteeringLimitReached">
            <summary>The steering limit currently reached (or none).</summary>
        </member>
        <member name="F:VRDriving.Steering.VehicleHandRelativeHandlebarSteering.m_HandlebarControllers">
            <summary>A list of HandlebarControllers currently grabbing the handlebars.</summary>
        </member>
        <member name="M:VRDriving.Steering.VehicleHandRelativeHandlebarSteering.OnControllerGrabbed(VRDriving.Steering.VehicleGrabbableSteeringBase,VRDriving.ControllerInfo)">
            <summary>A callback intended to be invoked when a controller grabs the steering mechanism.</summary>
            <param name="pSteeringBase"></param>
            <param name="pController">The ControllerInfo for the controller that grabbed the steering mechanism.</param>
        </member>
        <member name="M:VRDriving.Steering.VehicleHandRelativeHandlebarSteering.OnControllerReleased(VRDriving.Steering.VehicleGrabbableSteeringBase,VRDriving.ControllerInfo)">
            <summary>A callback intended to be invoked when a controller releases the steering mechanism.</summary>
            <param name="pSteeringBase"></param>
            <param name="pController">The ControllerInfo for the controller that released the steering mechanism.</param>
        </member>
        <member name="T:VRDriving.Steering.VehicleHandRelativeSteering">
            <summary>
            A component that should be attached to the vehicle's steering grabbable that sets a vehicle's steering angle based on hand/controller rotations.
            </summary>
            Author: Mathew Aloisio
        </member>
        <member name="F:VRDriving.Steering.VehicleHandRelativeSteering.SteeringMode.Offset">
            <summary>
            Steering is computed as an offset from the relevant hand(s) grab angle(s).
            
            NOTE: In this mode the visual hands will not desync from the controllers when switching from 2 handed to 1 handed driving, but you may experience the wheel snapping to the appropriate controller rotation when
            going from 2 hands to 1 hand.
            </summary>
        </member>
        <member name="F:VRDriving.Steering.VehicleHandRelativeSteering.SteeringMode.Delta">
            <summary>
            Steering is computed as cumulatively using delta from the current steering angle.
            
            NOTE: In this mode the visual hands will desync from the controllers when switching from 2 handed to 1 handed driving, but you will not experience the wheel snapping to the appropriate controller rotation when
            going from 2 hands to 1 hand.
            </summary>
        </member>
        <member name="P:VRDriving.Steering.VehicleHandRelativeSteering.SteeringWheelAngle">
            <summary>A running total for the steering wheel's angle.</summary>
        </member>
        <member name="P:VRDriving.Steering.VehicleHandRelativeSteering.LeftController">
            <summary>The left hand currently holding the steering wheel or null.</summary>
        </member>
        <member name="P:VRDriving.Steering.VehicleHandRelativeSteering.LeftControllerCumulativeRotation">
            <summary>The cumulative rotation of the left controller since grab.</summary>
        </member>
        <member name="P:VRDriving.Steering.VehicleHandRelativeSteering.LeftControllerGrabSteeringAngle">
            <summary>The value of SteeringWheelAngle at the time the left controller grabbed.</summary>
        </member>
        <member name="P:VRDriving.Steering.VehicleHandRelativeSteering.LeftControllerLastAngle">
            <summary>The angle around the controller rotation axis of the left controller the last frame the steering wheel was grabbed with the left hand.</summary>
        </member>
        <member name="P:VRDriving.Steering.VehicleHandRelativeSteering.LeftControllerDeltaDebt">
            <summary>Tracks the accumulated 'debt' of the left controller past the steering limit when in delta steering mode.</summary>
        </member>
        <member name="P:VRDriving.Steering.VehicleHandRelativeSteering.LastLeftControllerDeltaAngle">
            <summary>The last delta angle for the left controller currently grabbing the steering mechanism.</summary>
        </member>
        <member name="P:VRDriving.Steering.VehicleHandRelativeSteering.RightController">
            <summary>The right hand currently holding the steering wheel or null.</summary>
        </member>
        <member name="P:VRDriving.Steering.VehicleHandRelativeSteering.RightControllerCumulativeRotation">
            <summary>The cumulative rotation of the right controller since grab. </summary>
        </member>
        <member name="P:VRDriving.Steering.VehicleHandRelativeSteering.RightControllerGrabSteeringAngle">
            <summary>The value of SteeringWheelAngle at the time the right controller grabbed.</summary>
        </member>
        <member name="P:VRDriving.Steering.VehicleHandRelativeSteering.RightControllerLastAngle">
            <summary>The angle around the controller rotation axis of the right controller the last frame the steering wheel was grabbed with the right hand.</summary>
        </member>
        <member name="P:VRDriving.Steering.VehicleHandRelativeSteering.RightControllerDeltaDebt">
            <summary>Tracks the accumulated 'debt' of the right controller past the steering limit when in delta steering mode.</summary>
        </member>
        <member name="P:VRDriving.Steering.VehicleHandRelativeSteering.LastRightControllerDeltaAngle">
            <summary>The last delta angle for the left controller currently grabbing the steering mechanism.</summary>
        </member>
        <member name="F:VRDriving.Steering.VehicleHandRelativeSteering.m_DefaultSteeringWheelLocalEulerAngles">
            <summary>The local euler angles of the steering wheel transform at Start().</summary>
        </member>
        <member name="M:VRDriving.Steering.VehicleHandRelativeSteering.GetControllerRotation(UnityEngine.Transform)">
            <summary>Returns the rotation around the controllerRotationAxis for the controller with the given Transform.</summary>
            <param name="pControllerTransform"></param>
            <returns>the rotation around the controllerRotationAxis for the controller with the given Transform.</returns>
        </member>
        <member name="M:VRDriving.Steering.VehicleHandRelativeSteering.GetControllerCenterDistance(UnityEngine.Transform)">
            <summary>Returns the projected center distance of the controller from the steering mechanism center.</summary>
            <param name="pControllerTransform"></param>
            <returns>a float representing the distance between the projected controller transform from the projected steering mechanism center.</returns>
        </member>
        <member name="M:VRDriving.Steering.VehicleHandRelativeSteering.OnControllerGrabbed(VRDriving.Steering.VehicleGrabbableSteeringBase,VRDriving.ControllerInfo)">
            <summary>A callback intended to be invoked when a controller grabs the steering mechanism.</summary>
            <param name="pSteeringBase"></param>
            <param name="pController">The ControllerInfo for the controller that grabbed the steering mechanism.</param>
        </member>
        <member name="M:VRDriving.Steering.VehicleHandRelativeSteering.OnControllerReleased(VRDriving.Steering.VehicleGrabbableSteeringBase,VRDriving.ControllerInfo)">
            <summary>A callback intended to be invoked when a controller releases the steering mechanism.</summary>
            <param name="pSteeringBase"></param>
            <param name="pController">The ControllerInfo for the controller that released the steering mechanism.</param>
        </member>
        <member name="T:VRDriving.Steering.VehicleWheelchairSteering">
            <summary>
            A component that uses two VehicleOneHandWheelSteering components to make wheelchair style steering.
            Implements wheelchair steering and acceleration/deceleration input controls based on:
            - The 'Acceleration' input is the average of the two VehicleOneHandWheelSteering components associated with each wheel.
            - The 'Steering Offset' is a value between -1 and 1 (-1 being left, 1 being right, 0 being neutral), it is calculated using the 'acceleration' input of each VehicleWheelSteering component.
            - When the right wheel is spun forward the 'steering offset' moves towards 1, when spun backward the 'steering offset' moves towards -1.
            - When the left wheel is spun forward the 'steering offset' moves towards -1, when spun backward the 'steering offset' moves towards 1.
            - Holding either wheel under the maxControllerBrakeVelocity for an amount of time over than or equal to the specified 'brakeDelay' causes the 'acceleration' value to approach 0 and causes a turn similar to spinning the wheel backwards.
            </summary>
            Author: Mathew Aloisio
        </member>
        <member name="P:VRDriving.Steering.VehicleWheelchairSteering.Acceleration">
            <summary>
            The acceleration input value. (Range: -1f to 1f)
            If 'enableAcceleration' is true the component will automatically recalculate the 'Acceleration' property every frame.
            </summary>
        </member>
        <member name="P:VRDriving.Steering.VehicleWheelchairSteering.SteeringOffset">
            <summary>Returns a value between -1 and 1 (-1 being left, 1 being right, 0 being neutral) that is calculated using the 'acceleration' input of each wheelchair wheel.</summary>
        </member>
        <member name="P:VRDriving.Steering.VehicleWheelchairSteering.LeftBraking">
            <summary>The 'Braking' input value for the left wheel. (Range -1f to 1f)</summary>
        </member>
        <member name="P:VRDriving.Steering.VehicleWheelchairSteering.RightBraking">
            <summary>The 'Braking' input value for the right wheel. (Range -1f to 1f)</summary>
        </member>
        <member name="F:VRDriving.Steering.VehicleWheelchairSteering.m_Acceleration">
            <summary>The hidden backing field for the 'Acceleration' property.</summary>
        </member>
        <member name="F:VRDriving.Steering.VehicleWheelchairSteering.m_LeftBraking">
            <summary>The hidden backing field for the 'LeftBraking' property.</summary>
        </member>
        <member name="F:VRDriving.Steering.VehicleWheelchairSteering.m_RightBraking">
            <summary>The hidden backing field for the 'RightBraking' property.</summary>
        </member>
        <member name="M:VRDriving.Steering.VehicleWheelchairSteering.CalculateAcceleration">
            <summary>Calculates the acceleration input for the wheelchair and returns it. (Return value must be between -1f and 1f.)</summary>
            <returns>a float representing the acceleration input for the wheelchair.</returns>
        </member>
        <member name="M:VRDriving.Steering.VehicleWheelchairSteering.SetAcceleration(System.Single)">
            <summary>
            Sets the 'Acceleration' property of this component. Useful for use with Unity editor events. (Range: -1f to 1f)
            If 'calculateAcceleration' is true the component will automatically recalculate the 'Acceleration' property every frame.
            </summary>
            <param name="pAcceleration"></param>
        </member>
        <member name="M:VRDriving.Steering.VehicleWheelchairSteering.SetCalculateAcceleration(System.Boolean)">
            <summary>Sets the 'calculateAcceleration' field for this component. Useful for use with Unity editor events.</summary>
            <param name="pCalculate"></param>
        </member>
        <member name="M:VRDriving.Steering.VehicleWheelchairSteering.SetCalculateBraking(System.Boolean)">
            <summary>Sets the 'calculateBraking' field for this component. Useful for use with Unity editor events.</summary>
            <param name="pCalculate"></param>
        </member>
        <member name="M:VRDriving.Steering.VehicleWheelchairSteering.SetCalculateSteering(System.Boolean)">
            <summary>Sets the 'calculateSteering' field for this component. Useful for use with Unity editor events.</summary>
            <param name="pCalculate"></param>
        </member>
        <member name="T:VRDriving.Steering.VehicleJointAngleSteering">
            <summary>
            A component that sets a vehicle's steering angle based on a joint's angle.
            </summary>
            Author: Mathew Aloisio
        </member>
        <member name="P:VRDriving.Steering.VehicleJointAngleSteering.LastSteeringWheelAngleDifference">
            <summary>
            Returns the difference between the steering wheel angle from this frame to last frame.
            </summary>
        </member>
        <member name="P:VRDriving.Steering.VehicleJointAngleSteering.SteeringWheelAngle">
            <summary>
            A running total for the steering wheel's angle.
            </summary>
        </member>
        <member name="T:VRDriving.Steering.VehicleGrabbableSteeringBase">
            <summary>
            An abstract class that is the base of all grabbable steering mechanisms.
            </summary>
            Author: Mathew Aloisio
        </member>
        <member name="F:VRDriving.Steering.VehicleGrabbableSteeringBase.m_GrabbingControllers">
            <summary>A List of ControllerInfos of controllers currently grabbing the steering mechanism.</summary>
        </member>
        <member name="P:VRDriving.Steering.VehicleGrabbableSteeringBase.GrabbingControllersCount">
            <summary>Returns an integer representing the number of 'ControllerInfo' entries in the 'grabbing controllers' array. Use VehicleKinematicSteeringBase.GetControllerInfo(int pIndex) to return the ControllerInfo for a specified index.</summary>
        </member>
        <member name="P:VRDriving.Steering.VehicleGrabbableSteeringBase.LastControllerReleasedTime">
            <summary>The Time.time of the last invokation to 'OnLastControllerReleased'.</summary>
        </member>
        <member name="M:VRDriving.Steering.VehicleGrabbableSteeringBase.GetControllerInfo(System.Int32)">
            <summary>Returns the ControllerInfo at the specified index in the 'grabbing controllers' array.</summary>
            <param name="pIndex"></param>
            <returns>the ControllerInfo at the specified index in the 'grabbing controllers' array.</returns>
        </member>
        <member name="M:VRDriving.Steering.VehicleGrabbableSteeringBase.OnGrabbed(UnityEngine.Transform,VRDriving.ControllerSide)">
            <summary>A callback intended to be invoked when a controller grabs the steering mechanism.</summary>
            <param name="pControllerTransform">The Transform of the controller that grabbed the steering mechanism.</param>
            <param name="pControllerSide">The ControllerSide for the controller that grabbed the steering mechanism.</param>
        </member>
        <member name="M:VRDriving.Steering.VehicleGrabbableSteeringBase.OnReleased(UnityEngine.Transform,VRDriving.ControllerSide)">
            <summary>A callback intended to be invoked when a controller releases the steering mechanism.</summary>
            <param name="pControllerTransform">The Transform of the controller that grabbed the steering mechanism.</param>
            <param name="pControllerSide">The ControllerSide for the controller that grabbed the steering mechanism.</param>
        </member>
        <member name="M:VRDriving.Steering.VehicleGrabbableSteeringBase.OnLastControllerReleased(VRDriving.ControllerInfo)">
            <summary>Invoked after the last controller releases the steering mechanism.</summary>
            <param name="pController"></param>
        </member>
        <member name="T:VRDriving.Steering.VehicleSteeringBase">
            <summary>
            An abstract class that is the base of all steering mechanisms.
            </summary>
            Author: Mathew Aloisio
        </member>
        <member name="P:VRDriving.Steering.VehicleSteeringBase.SteeringAngleMultiplier">
            <summary>A multiplier to use when setting the steering angle of a vehicle. (Generally steering angle is set by doing maxVehicleSteeringAngle * SteeringAngleMultiplier)</summary>
        </member>
        <member name="P:VRDriving.Steering.VehicleSteeringBase.VehicleLocalVelocity">
            <summary>Returns vehicleTransform.InverseTransformDirection(vehicleRigidbody.velocity)</summary>
        </member>
        <member name="M:VRDriving.Steering.VehicleSteeringBase.SetVehicle(UnityEngine.Transform,UnityEngine.Rigidbody)">
            <summary>
            Sets the 'vehicle' associated with this steering component.
            The Transform refers to the Transform of the vehicle being controlled.
            The Rigidbody refers to a Rigidbody in the vehicle being controlled that may be used to get local velocity and mass.
            </summary>
            <param name="pVehicleTransform"></param>
            <param name="pVehicleRigidbody"></param>
        </member>
        <member name="T:VRDriving.Wheels.OneHandWheel">
            <summary>
            A component that can be used to allow a user to accelerate, brake, or accelerate in reverse by spinning a wheel.
            - The 'acceleration' value is from -1 to 1, it always moves towards 0 at a constant rate.
            - The 'acceleration' value goes up when 'spinning wheel' forward, either wheel.
            - The 'acceleration' value goes down when 'spinning wheel' backward, either wheel.
            - Holding the wheel causes the 'acceleration' input to be set to 0 instantly.
            - Holding the wheel instantly causing braking to start and the 'brake' input will approach 1 at brakeRate units per second.
            - After releasing the wheel the 'brake' input will be immediately zero'd.
              
            - To add acceleration the controller moves into the wheel's trigger, moves, then leaves the wheel's trigger and the acceleration (in either direction) is determined by the controller's average velocity in the wheel's forward direction.
            - Acceleration in either direction will only be applied if the controller's absolute average forward speed is above the controllerSpeedThreshold on release.
            
            - Momentum is considered when determing deceleration rate, this makes the users wheel inputs less effective when on hills, etc.
            
            - To brake the user grabs the wheel.
            
            AVERAGE MEASURED RELEASE FORWARD SPEED BY ONTROLLER
            CONTROLLER              |       SPEED RANGE MEASURED (units/sec)
            ------------------------------------------------------------------
            Valve Index             |       0.0069 to 0.0115
            
            NOTE: Only ONE controller can grab this type of component at a time.
            </summary>
            Author: Mathew Aloisio
        </member>
        <member name="T:VRDriving.Wheels.OneHandWheel.WheelController">
            <summary>Stores reference to a controller that is grabbing a wheel and what wheel side was grabbed.</summary>
        </member>
        <member name="F:VRDriving.Wheels.OneHandWheel.VelocityEntry.velocity">
            <summary>The velocity for the VelocityEntry instance.</summary>
        </member>
        <member name="F:VRDriving.Wheels.OneHandWheel.VelocityEntry.time">
            <summary>The Time.time the VelocityEntry was recorded.</summary>
        </member>
        <member name="P:VRDriving.Wheels.OneHandWheel.IsBraking">
            <summary>Returns true while braking the wheel, otherwise false.</summary>
        </member>
        <member name="P:VRDriving.Wheels.OneHandWheel.Braking">
            <summary>Starting at 0 approaches 1 at 'brakeRate' units per second while braking.</summary>
        </member>
        <member name="P:VRDriving.Wheels.OneHandWheel.GrabbedBy">
            <summary>A reference to the WheelController currently grabbing this component, otherwise null.</summary>
        </member>
        <member name="P:VRDriving.Wheels.OneHandWheel.GrabbedThisFrame">
            <summary>Returns true if this component was grabbed this frame, otherwise false.</summary>
        </member>
        <member name="P:VRDriving.Wheels.OneHandWheel.LastControllerLocalPosition">
            <summary>The local space position of the controller last frame (or the first frame of a grab).</summary>
        </member>
        <member name="P:VRDriving.Wheels.OneHandWheel.LastGrabTime">
            <summary>Returns the last Time.time this component was grabbed.</summary>
        </member>
        <member name="P:VRDriving.Wheels.OneHandWheel.LastReleaseTime">
            <summary>Returns the last Time.time this component was released.</summary>
        </member>
        <member name="P:VRDriving.Wheels.OneHandWheel.AverageControllerLocalVelocity">
            <summary>Returns the average velocity of the controller currently grabbing the wheel in local space, otherwise Vector3.zero.</summary>
        </member>
        <member name="P:VRDriving.Wheels.OneHandWheel.AverageControllerLocalForwardSpeed">
            <summary>Returns the average speed of the controller in the WheelForwardDirection in local space.</summary>
        </member>
        <member name="P:VRDriving.Wheels.OneHandWheel.LastBrakingConditionsMetTime">
            <summary>Returns the last Time.time that the braking conditions were met for this wheel.</summary>
        </member>
        <member name="P:VRDriving.Wheels.OneHandWheel.LastBrakingConditionsNotMetTime">
            <summary>Returns the last Time.time that the braking conditions were not met for this wheel.</summary>
        </member>
        <member name="P:VRDriving.Wheels.OneHandWheel.WheelForwardDirection">
            <summary>Returns the wheel's forward direction in world space.</summary>
        </member>
        <member name="F:VRDriving.Wheels.OneHandWheel.m_IsBraking">
            <summary>The hidden backing field for the 'IsBraking' property.</summary>
        </member>
        <member name="F:VRDriving.Wheels.OneHandWheel.m_ControllerVelocityHistory">
            <summary>A list of velocity history for the controller currently grabbing this wheel.</summary>
        </member>
        <member name="M:VRDriving.Wheels.OneHandWheel.SimulateMomentum(UnityEngine.Vector3,System.Single)">
            <summary>May be invoked (every frame) to simulate the effect(s) of momentum on the 'one hand wheel' controller.</summary>
            <param name="pVelocity">The velocity of the wheel.</param>
            <param name="pRPM">The RPM the wheel is rotating at.</param>
        </member>
        <member name="M:VRDriving.Wheels.OneHandWheel.CheckIfBrakingConditionsMet">
            <summary>Checks if the conditions for braking of this wheel are met, returns true if met, otherwise false. Also updates 'LastBrakingConditionsMetTime' and 'LastBrakingConditionsNotMetTime'.</summary>
            <returns>true if braking conditions for this wheel are met, otherwise false.</returns>
        </member>
        <member name="M:VRDriving.Wheels.OneHandWheel.CalculateControllerVelocity">
            <summary>Updates the 'AverageControllerVelocity' property.</summary>
        </member>
        <member name="M:VRDriving.Wheels.OneHandWheel.OnGrabbed(UnityEngine.Transform,VRDriving.ControllerSide)">
            <summary>
            A callback intended to be invoked when a controller grabs the wheel.
            </summary>
            <param name="pControllerTransform">The Transform of the controller that grabbed the wheel.</param>
            <param name="pControllerSide">The ControllerSide for the controller that grabbed the wheel.</param>
        </member>
        <member name="M:VRDriving.Wheels.OneHandWheel.OnReleased(UnityEngine.Transform,VRDriving.ControllerSide)">
            <summary>
            A callback intended to be invoked when a controller releases the wheel.
            </summary>
            <param name="pControllerTransform">The Transform of the controller that grabbed the wheel.</param>
            <param name="pControllerSide">The ControllerSide for the controller that grabbed the wheel.</param>
        </member>
    </members>
</doc>
